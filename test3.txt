def call_env(var_name, val, overwrite_status_num):
	setenv(var_name, val, overwrite_status_num)

//actual code
if (strcmp(command, "setenv") == 0) {
        if (argc != 3) {
            fprintf(stderr, "setenv: Incorrect number of arguments\n");
            return 1;
  	}
else{
	//assume we tokenized the string
	call_env(token1, token2, token3);
}
// setenv KEY=VALUE
token1 = strtok(command, delim); // setenv
token1 = strtok(NULL, delim); // KEY=VALUE
------
token2 = strtok(token1, "="); //KEY
key = token2;
token2 = strtok(NULL, "="); // VALUE
value = token2;

call_env(key, value, 1);

/* focus here */
//apply strtok to separate echo from $$
if (strcmp(command, "$$") == 0)
{
	pid = getpid()
	printf("%u\n", pid);
}

//apply strtok to separate echo from $?
if (strcmp(command, "$?") == 0)
{
	status = system(command)
	printf("%d\n", status)
}

//apply strtok to separate echo from $PATH
if (strcmp(command, "$PATH") == 0)
{
	char *path_name = getenv("PATH")
	printf("%s\n", path_name)
}


